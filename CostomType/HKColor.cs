using System.Text;
using Agarme_Server.Misc;

namespace Agarme_Server.CostomType
{
    public struct HKColor : IRgba<byte>
    {
        public static readonly uint[] colorTable = new uint[]
        {
    4278255360, 4291019317, 4285136087, 4287803962, 4281516573,
    4282633475, 4287135726, 4285457485, 4288028223, 4289268036,
    4282775024, 4285975435, 4283667147, 4288980560, 4284381230,
    4287583610, 4285564530, 4283227513, 4287124463, 4290822171,
    4280421469, 4290223783, 4279749791, 4287725037, 4294861167,
    4290212714, 4279004118, 4294423894, 4280351171, 4283474075,
    4281883192, 4291084954, 4283281124, 4282849717, 4287693939,
    4285308826, 4288792368, 4279172937, 4291190619, 4294368975,
    4286793118, 4282308934, 4285510980, 4283254088, 4289843266,
    4289445689, 4283043194, 4291708660, 4294862022, 4292679204,
    4280938953, 4280517528, 4284926394, 4290513925, 4291945963,
    4279174771, 4288347688, 4279628075, 4288268191, 4284828962,
    4292491149, 4280768279, 4280832549, 4288613695, 4294300871,
    4285995637, 4280612266, 4282993889, 4294469457, 4284415817,
    4278846787, 4294289392, 4279052528, 4291545785, 4293185522,
    4284917404, 4279889950, 4280501738, 4279069299, 4284047735,
    4285433764, 4285129394, 4278282033, 4288176168, 4285946313,
    4286313432, 4285185285, 4294475984, 4292658319, 4284647996,
    4285620449, 4278636861, 4281355674, 4280988778, 4279718718,
    4286116822, 4289102921, 4281812810, 4294624720, 4286540666,
    4288018295, 4285518616, 4279603153, 4280939443, 4286831564,
    4290795526, 4292995485, 4294608589, 4281492718, 4281163665,
    4292055863, 4285315335, 4286379190, 4278286260, 4286725453,
    4281011208, 4294305779, 4289161650, 4283889514, 4280681728,
    4287351461, 4284675231, 4291629462, 4280960380, 4288188978,
    4289204898, 4281453699, 4281136501, 4286083151, 4279088409,
    4288605814, 4285930688, 4288128269, 4293244338, 4288065265,
    4287063364, 4288457811, 4292042677, 4294575430, 4282556132,
    4286098940, 4284554447, 4291175039, 4291197733, 4282147444,
    4288901871, 4282228002, 4278562271, 4292515595, 4280018401,
    4293890524, 4292850514, 4288277565, 4283744503, 4293180199,
    4281708963, 4281323535, 4288662134, 4286599474, 4289338984,
    4291162999, 4285821077, 4285210199, 4294129547, 4292976435,
    4291108230, 4289161779, 4292644347, 4282848877, 4289386417,
    4291247054, 4280231273, 4282886668, 4287948715, 4285974045,
    4294030973, 4284388426, 4281681224, 4285505104, 4283107172,
    4290213263, 4287492419, 4284445112, 4292100754, 4289393432,
    4280992983, 4294580770, 4284362688, 4290013020, 4293719561,
    4288784163, 4289252706, 4280361496, 4287195280, 4292759780,
    4285515535, 4280561471, 4286394441, 4291138328, 4294098131,
    4287005705, 4289829014, 4280382947, 4287515136, 4285127012,
    4284111412, 4282165980, 4287213778, 4294158525, 4279890855,
    4293113126, 4278751917, 4293483189, 4282467762, 4294357337,
    4281849501, 4294393328, 4286881413, 4288671527, 4285027797,
    4294521527, 4289380993, 4286083515, 4279261183, 4283502081,
    4283657541, 4293763795, 4292013504, 4287701873, 4289129071,
    4292023013, 4288952935, 4283941408, 4281535724, 4284141146,
    4279870710, 4294433494, 4293835908, 4278366864, 4292269907,
    4278883994, 4278824709, 4279222392, 4287939513, 4289674708,
    4281674416, 4290057989, 4289919385, 4283287754, 4287563961,
    4294197419, 4284754628, 4280651280, 4294168186, 4282570342
        };
        public byte r, g, b, a;
        byte IRgba<byte>.A { get => a; set => a = value; }
        byte IRgb<byte>.R { get => r; set => r = value; }
        byte IRgb<byte>.G { get => g; set => g = value; }
        byte IRgb<byte>.B { get => b; set => b = value; }
        public static unsafe implicit operator int(HKColor c)//转换成整数型
        {
            int i;
            var p = (byte*)&i;
            *p++ = c.r;
            *p++ = c.g;
            *p++ = c.b;
            *p = c.a;
            return i;
        }
        public HKColor(byte r, byte g, byte b, byte a = byte.MaxValue)
        {
            this.r = r; this.g = g; this.b = b; this.a = a;
        }
        public HKColor(byte gray) : this(gray, gray, gray)
        {
        }
        public unsafe HKColor(int i)
        {
            var p = (byte*)&i;
            r = *p++;
            g = *p++;
            b = *p++;
            a = *p;
        }
        public unsafe HKColor(uint i)
        {
            var p = (byte*)&i;
            r = *p++;
            g = *p++;
            b = *p++;
            a = *p;
        }
        public static unsafe implicit operator uint(HKColor c)
        {
            uint i;
            var p = (byte*)&i;
            *p++ = c.r;
            *p++ = c.g;
            *p++ = c.b;
            *p = c.a;
            return i;
        }
        public static unsafe implicit operator HKColor(int c) => new HKColor(c);
        public static unsafe implicit operator HKColor(uint c) => new HKColor(c);
        private double Brightness
        {
            get => 0.2126 * r + 0.7152 * g + 0.0722 * b;
        }
        public override string ToString()
        {
            var sb = new StringBuilder();
            //sb.Append("r");
            sb.Append(r.ToString());
            sb.Append(",");
            sb.Append(g.ToString());
            sb.Append(",");
            sb.Append(b.ToString());
            sb.Append(",");
            sb.Append(a.ToString());
            return sb.ToString();
        }
        public static HKColor Rand() => new HKColor(HKRand.Byte(0, 255), HKRand.Byte(0, 255), HKRand.Byte(0, 255), 1);

        public static HKColor RandTable() => new HKColor(colorTable[HKRand.Int(0, colorTable.Length - 1)]);
    }
}
